---
- hosts: all
  remote_user: vagrant
  sudo: true
  vars:
    - config_hosts: true
  roles:
    - mrlesmithjr.postfix
    - { role: mrlesmithjr.suricata, tags: suricata }
  tasks:
    - name: updating /etc/hosts in case of dns lookup issues
      lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ hostvars[item].ansible_eth1.ipv4.address }} {{ item }}" state=present
      with_items: "{{ groups['all'] }}"
      when: config_hosts is defined and config_hosts
      tags:
        - update_etc_hosts

    - name: installing common packages
      apt: name={{ item }} state=present
      with_items:
        - git
        - mysql-client

    - name: ensuring ssh_pub_keys folder exists
      file: path=ssh_pub_keys state=directory
      delegate_to: localhost
      sudo: false
      tags:
        - ssh_keys

    - name: generating ssh keys
      user: name=vagrant generate_ssh_key=yes
      tags:
        - ssh_keys

    - name: downloading ssh keys
      fetch: src=/home/vagrant/.ssh/id_rsa.pub dest=./ssh_pub_keys/vagrant@{{ ansible_hostname }}.pub flat=yes
      tags:
        - ssh_keys

    - name: adding ssh authorized_keys
      authorized_key: user=vagrant key="{{ lookup('file', 'ssh_pub_keys/vagrant' + '@' + item + '.pub') }}" state=present
      with_items: "{{ groups['all'] }}"
      tags:
        - ssh_keys

    - name: identifying hosts
      local_action: ping
      register: id_hosts
      tags:
        - ssh_keys

    - name: cleaning up
      file: path=/tmp/hosts state=absent
      tags:
        - ssh_keys

    - name: cleaning up
      file: path=/tmp/hosts state=absent
      delegate_to: localhost
      run_once: true
      tags:
        - ssh_keys

    - name: creating temporary hosts file
      file: path=/tmp/hosts state=touch mode=0777
      delegate_to: localhost
      run_once: true
      tags:
        - ssh_keys

    - name: adding hosts to temporary hosts file
      lineinfile: dest=/tmp/hosts regexp="^{{ ansible_hostname }}" line="{{ ansible_hostname }}" state=present
      delegate_to: localhost
      with_items: id_hosts.results
      tags:
        - ssh_keys

    - name: adding hosts to temporary hosts file
      lineinfile: dest=/tmp/hosts regexp="^{{ ansible_hostname }}" line="{{ ansible_hostname }}" state=present
      delegate_to: localhost
      with_items: id_hosts.results
      tags:
        - ssh_keys

    - name: adding hosts to temporary hosts file
      lineinfile: dest=/tmp/hosts regexp="^{{ ansible_default_ipv4.address }}" line="{{ ansible_default_ipv4.address }}" state=present
      delegate_to: localhost
      with_items: id_hosts.results
      tags:
        - ssh_keys

    - name: keyscan
      shell: "ssh-keyscan -H -f /tmp/hosts >> /tmp/hosts.ready"
      delegate_to: localhost
      run_once: true
      tags:
        - ssh_keys

    - name: sort
      shell: "sort -u /tmp/hosts.ready > /tmp/hosts.sorted"
      delegate_to: localhost
      run_once: true
      tags:
        - ssh_keys

    - name: copying new ssh_known_hosts
      copy: src=/tmp/hosts.sorted dest=/etc/ssh/ssh_known_hosts
      tags:
        - ssh_keys

    - name: cleaning up
      file: path=/tmp/hosts state=absent
      delegate_to: localhost
      run_once: true
      tags:
        - ssh_keys

- hosts: load-balancers
  remote_user: vagrant
  sudo: true
  handlers:
    - name: restart keepalived
      service: name=keepalived state=restarted
    - name: restart nginx
      service: name=nginx state=restarted
  vars:
    - disable_default_nginx_site: true
    - load_balancer_configs:
        - name: mysql
          load_balancing_method: least_conn ##round_robin, least_conn, least_time, hash or ip_hash
          protocol: tcp
          backend_port: 3306
          frontend_port: 3306
          backend_servers:
           - mysql-1
           - mysql-2
        - name: nginx
          load_balancing_method: ip_hash  ##round_robin, least_conn, least_time, hash or ip_hash
          protocol: http
          backend_port: 80
          frontend_port: 80
          backend_servers:
            - web-1
            - web-2
          server_name: "{{ ansible_hostname }}"
          location: /
          proxy_headers:
            - "Host $host"
            - "X-Forwarded-Proto $scheme"
            - "X-Real-IP $remote_addr"
            - "X-Forwarded-For $proxy_add_x_forwarded_for"
#        - name: elasticsearch
#          load_balancing_method: least_conn ##round_robin, least_conn, least_time, hash or ip_hash
#          protocol: tcp
#          backend_port: 9200
#          frontend_port: 9200
#          backend_servers:
#            - es-1
#            - es-2
    - nginx_branch: development
  roles:
    - { role: mrlesmithjr.keepalived, tags: config_vip }
    - mrlesmithjr.nginx
  tasks:
    - name: adding nginx repo
      apt_repository: repo='ppa:nginx/{{ nginx_branch }}' state=present
      tags:
        - config_load_balancers

    - name: upgrading nginx
      apt: name=nginx state=latest
      tags:
        - config_load_balancers

    - name: configuring nginx for tcp load balancing
      template: src=templates/etc/nginx/nginx.conf.j2 dest=/etc/nginx/nginx.conf
      notify: restart nginx
      tags:
        - config_load_balancers

    - name: ensuring nginx stream.d folder exists
      file: path=/etc/nginx/stream.d state=directory
      tags:
        - config_load_balancers

    - name: configuring nginx load balancer (TCP) configs
      template: src=templates/etc/nginx/stream.d/streams.conf.j2 dest=/etc/nginx/stream.d/{{ item.name }}.conf
      notify: restart nginx
      with_items: "{{ load_balancer_configs }}"
      when: load_balancer_configs is defined and item.protocol == "tcp"
      tags:
        - config_load_balancers

    - name: configuring nginx load balancer (HTTP) configs
      template: src=templates/etc/nginx/conf.d/http.conf.j2 dest=/etc/nginx/conf.d/{{ item.name }}.conf
      notify: restart nginx
      with_items:  "{{ load_balancer_configs }}"
      when: load_balancer_configs is defined and item.protocol == "http"
      tags:
        - config_load_balancers

    - name: disabling NGINX default web site
      file: dest=/etc/nginx/sites-enabled/default state=absent
      notify: restart nginx
      when: disable_default_nginx_site is defined and disable_default_nginx_site
      tags:
        - config_load_balancers

    - name: configuring keepalived vip
      template: src=templates/etc/keepalived/keepalived.conf.j2 dest=/etc/keepalived/keepalived.conf
      notify: restart keepalived
      tags:
        - config_load_balancers
        - config_vip

- hosts: mysql-nodes
  remote_user: vagrant
  sudo: true
  vars:
  handlers:
    - name: restart mysql
      service: name=mysql state=restarted
  roles:
    - mrlesmithjr.mysql
  tasks:
    - name: checking if cluster is configured
      stat: path=/etc/mysql/clustered
      register: clustered

    - name: creating mysql users
      mysql_user: name={{ item.name }} password={{ item.pass }} priv=*.*:ALL state=present host=%
      with_items: mysql_accounts

    - name: configuring mysql
      template: src=templates/etc/mysql/my.cnf.j2 dest=/etc/mysql/my.cnf owner=root group=root mode=0644
      register: mysql_configured

    - name: restarting mysql
      service: name=mysql state=restarted
      when: mysql_configured.changed

    - name: finding master log position
      mysql_replication: mode=getmaster
      register: master
      delegate_to: "{{ mysql_master }}"
      when: not clustered.stat.exists

    - name: finding slave log position
      mysql_replication: mode=getmaster
      register: slave
      delegate_to: "{{ mysql_slave }}"
      when: not clustered.stat.exists

    - name: stopping slave on slave
      mysql_replication: mode=stopslave
      when: not clustered.stat.exists

    - name: configuring replication on slave
      mysql_replication: mode=changemaster master_host={{ mysql_master }} master_log_file={{ master.File }} master_log_pos={{ master.Position }} master_user={{ mysql_replication_user }} master_password={{ mysql_replication_pass }}
      when: mysql_master is defined and inventory_hostname == "{{ mysql_slave }}" and not clustered.stat.exists

    - name: configuring replication on master
      mysql_replication: mode=changemaster master_host={{ mysql_slave }} master_log_file={{ slave.File }} master_log_pos={{ slave.Position }} master_user={{ mysql_replication_user }} master_password={{ mysql_replication_pass }}
      when: mysql_slave is defined and inventory_hostname == "{{ mysql_master }}" and not clustered.stat.exists

    - name: creating mysql dbs
      mysql_db: name={{ item }} state=present
      register: dbs_created
      with_items: mysql_replication_dbs
      when: mysql_master is defined and inventory_hostname == "{{ mysql_master }}"

    - name: marking cluster as configured
      file: path=/etc/mysql/clustered state=touch
      when: not clustered.stat.exists

    - name: checking if wordpress site has been pre-loaded
      stat: path=/var/log/wordpress_site_pre_loaded
      register: wordpress_site_pre_loaded
      when: wordpress_preload_db is defined and wordpress_preload_db

    - name: copying pre-loaded wordpress sql file
      copy: src=files/wordpress.sql dest=/tmp/wordpress.sql
      when: not wordpress_site_pre_loaded.stat.exists and (wordpress_preload_db is defined and wordpress_preload_db)

    - name: pre-loading wordpress db
      mysql_db: state=import name={{ wordpress_db }} target=/tmp/wordpress.sql
      when: not wordpress_site_pre_loaded.stat.exists and (wordpress_preload_db is defined and wordpress_preload_db) and (mysql_master is defined and inventory_hostname == "{{ mysql_master }}")

    - name: marking wordpress site as pre-loaded
      file: path=/var/log/wordpress_site_pre_loaded state=touch
      when: not wordpress_site_pre_loaded.stat.exists and (wordpress_preload_db is defined and wordpress_preload_db)

- hosts: web-servers
  remote_user: vagrant
  sudo: true
  vars:
    - disable_default_nginx_site: true
    - nginx_default_root: /usr/share/nginx/html
  handlers:
    - name: restart nginx
      service: name=nginx state=restarted
  roles:
    - mrlesmithjr.nginx
  tasks:
    - name: installing pre-req packages
      apt: name={{ item }} state=present
      with_items:
        - mcrypt
        - php5
        - php5-cgi
        - php5-fpm
        - php5-mysql

    - name: configuring default web page to validate load-balancers
      template: src=templates/usr/share/nginx/html/index.html.j2 dest="{{ nginx_default_root }}/index.html"

    - name: downloading wordpress package
      get_url: url={{ wordpress_package }} dest="{{ nginx_default_root }}/wordpress.tar.gz"

    - name: extracting wordpress package
      unarchive: src="{{ nginx_default_root }}/wordpress.tar.gz" dest="{{ nginx_default_root }}/" creates="{{ wordpress_default_root }}/index.php" copy=no

    - name: disabling NGINX default web site
      file: dest=/etc/nginx/sites-enabled/default state=absent
      notify: restart nginx
      when: disable_default_nginx_site is defined and disable_default_nginx_site

    - name: Fetch random salts for WordPress config
      local_action: command curl https://api.wordpress.org/secret-key/1.1/salt/
      register: wp_salt
      sudo: no

    - name: configuring wordpress site
      template: src=templates/etc/nginx/conf.d/default.conf.j2 dest=/etc/nginx/conf.d/default.conf
      notify: restart nginx

    - name: configuring wordpress
      template: src=templates/usr/share/nginx/html/wordpress/wp-config.php.j2 dest="{{ wordpress_default_root }}/wp-config.php" owner=www-data group=www-data

    - name: changing ownership of wordpress root folder
      file: dest={{ wordpress_default_root }} state=directory owner=www-data group=www-data recurse=yes

    - name: creating ansible playbook
      template: src=templates/sync_wordpress.yml.j2 dest=/vagrant/sync_wordpress.yml owner=vagrant group=vagrant
      tags:
        - cron

    - name: creating cron job
      cron: name="ansible sync wordpress" minute=*/1 user=vagrant job="cd /vagrant && /usr/bin/ansible-playbook -i /vagrant/hosts /vagrant/sync_wordpress.yml" cron_file=ansible_sync_wordpress state=present
      tags:
        - cron
